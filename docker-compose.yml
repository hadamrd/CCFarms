services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefect
      POSTGRES_DB: prefect
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "prefect"]
      interval: 5s
      retries: 5

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  prefect-server:
    image: prefecthq/prefect:2-latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      - PREFECT_API_URL=http://prefect-server:4200/api
      - PREFECT_REDIS_URL=redis://redis:6379/0
    ports:
      - "4200:4200"
    command: prefect server start --host 0.0.0.0
    healthcheck: 
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:4200/api/health')"]
      interval: 3s
      timeout: 5s
      retries: 5
      start_period: 10s

  prefect-worker:
    image: prefecthq/prefect:2-latest
    restart: always
    depends_on:
      prefect-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
    volumes:
      - ${PWD}:/opt/prefect/project
    working_dir: /opt/prefect/project
    command: >
      bash -c 'pip install -e . && prefect worker start --pool "default-pool" --work-queue "default"'
    healthcheck:
      test: ["CMD-SHELL", "prefect work-pool inspect default-pool | grep -i 'status.*ready'"]
      interval: 3s
      timeout: 10s
      retries: 5
      start_period: 10s

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: article_user
      MONGO_INITDB_ROOT_PASSWORD: article_password
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres-data:
  mongodb-data:

networks:
  default:
    name: orchestration-network